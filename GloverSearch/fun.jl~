using LinearAlgebra
using Printf
using Statistics
using Random
using DelimitedFiles



function COracle(d,n,k);


    OrOnes =  [];

    for nv1 in 0:k^d-1;
        v1 = VecConFases(d,k,nv1);
        for nv2 in 0:k^d-1;
            v2 = VecConFases(d,k,nv2);
            o12 = IsOrthogonality(v1,v2);
            if o12 == 1;      # si v1 y v2 no son ortogonales no importa v3 y v4
            for nv3 in 0:k^d-1;
                v3 = VecConFases(d,k,nv3);
                m13 =  IsMubs(v1,v3);
                m23 =  IsMubs(v2,v3);
                if  (m13 & m23) == 1;   # si v3 no es mub con v1 y v2 no importa v4
                for nv4 in 0:k^d-1;
                    v4 = VecConFases(d,k,nv4);
                    o34 =  IsOrthogonality(v3,v4);
                    m14 =  IsMubs(v1,v3);
                    m24 =  IsMubs(v2,v3);   
                    if (o34 & o m14 & m24 )==1 ;
                        push!(OrOnes,nv4+nv3+2^)
                    end           
                end
                end
            end

            end 
        end
    end


end
#
# Crea el vector las configuracion de las fases
# solo para un vectore la matriz
# d es la dimension
# n el numero de matrices
# k el nuemro de fases
# conf el numero de configuracion
function VecConFases(d,k,conf);
    t = digits(conf,base=k,pad=d)
    return exp.(im*2*pi.*t/k)./sqrt(d)
end


#
# Crea el vector de eigen estados de sigma_z  para 
# Nqb qbits de todo el sistema
# k es el numero de estado
# Nqb el numero de qbits
function VecConf(k,Nqb);
    t = digits(k,base=2,pad=Nqb).*2 .-1;
    return t
end
#
# Evalua  Mubsness, el producto entre dos 
# vectores cumple la relga de mubs
#  v1, v2 son vectores de norma 1
function IsMubs(v1,v2);
    #d,t = size(v1)
    flag = 0;
    t = 1/sqrt(d) -abs(v1'*v2);
    if abs(t)< 1e-14;
	flag = 1;
    else
	flag = 0;
    end
    return flag;
end
#
# Evalua ortogonalidad en vectores
#
#  v1 ,v2 son vectores de norma 1
function  IsOrthogonality(v1,v2);
    t = abs(v1'*v2);
    flag = 0;
    if abs(t)< 1e-12;
	flag = 1;
    else
	flag = 0;
    end
    return flag;
end




